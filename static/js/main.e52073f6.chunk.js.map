{"version":3,"sources":["index.js"],"names":["Cell","props","nextProps","nextState","size","this","className","cell_style","width","height","style","onClick","React","Component","Container","handleStartClick","setState","cells","state","intervalID","setInterval","window","requestAnimationFrame","timeStep","isGenerating","handleStopClick","clearInterval","Array","fill","cellSize","Math","floor","pxWidth","i","j","push","key","handleClick","start_class","stop_class","container_style","Slider","value","trackWidth","thumbWidth","onValueChanged","handleValueChanged","type","totalDim","round","new_arr","slice","numNeighbours","countNeighbours","getArrayByIndex","x","y","Dx","Dy","count","progress","isDragging","prevX","document","addEventListener","e","handleMouseMove","handleThumbUp","removeEventListener","offset","len","left","onMouseDown","handleThumbDown","clientX","diff","ReactDOM","render","pxHeight","getElementById"],"mappings":"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","file":"static/js/main.e52073f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./index.scss\"\r\n\r\n\r\nclass Cell extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n   shouldComponentUpdate(nextProps, nextState) {\r\n\r\n\r\n\r\n        return nextProps.size !== this.props.size || this.props.className !== nextProps.className;\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const cell_style = {\r\n            width:this.props.size,\r\n            height:this.props.size,\r\n        };\r\n\r\n\r\n\r\n        return <div className={this.props.className} style={cell_style} onClick={this.props.onClick}/>\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Container extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cells: new Array(this.props.width * this.props.height).fill(0),\r\n            intervalID: -1,\r\n            isGenerating: false,\r\n            width: props.width,\r\n            height: props.height,\r\n        };\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        const cellSize = Math.floor(this.props.pxWidth/this.state.width);\r\n        //console.log(cellSize + \" \" + this.state.width);\r\n\r\n        const cells = [];\r\n\r\n        for(let i=0;i< this.state.height;i++){\r\n            for(let j=0;j< this.state.width;j++){\r\n                let className;\r\n                if(j === this.state.height - 1 && i === this.state.width - 1) {\r\n                    className = 'cell';\r\n                }else if(j === this.state.width - 1){\r\n                    className = 'cell border-bottom';\r\n                }else if(i === this.state.height - 1){\r\n                    className = 'cell border-right';\r\n                }else{\r\n                    className = 'cell border-bottom border-right';\r\n                }\r\n\r\n                if(this.state.cells[this.state.width * i + j] === 1){\r\n                    className += \" selected-color-early\";\r\n                }else if(this.state.cells[this.state.width * i + j] === 2){\r\n                    className += \" selected-color\";\r\n                }\r\n\r\n                cells.push(\r\n                    <Cell key = {i+' '+j} className = {className} size = {cellSize} onClick = {()=>this.handleClick(i,j)}/>\r\n                );\r\n            }\r\n\r\n        }\r\n\r\n\r\n        const container_style = {\r\n            width: `${cellSize * this.state.width}px`,\r\n            height: `${cellSize * this.state.width}px`,\r\n\r\n        };\r\n\r\n\r\n\r\n        let start_class;\r\n        let stop_class;\r\n\r\n        if(this.state.isGenerating){\r\n            start_class = 'disabled-button';\r\n            stop_class = 'button';\r\n        }else{\r\n            start_class = 'button';\r\n            stop_class = 'disabled-button';\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={'container-main'}>\r\n                <div className={'container'} style = {container_style}>\r\n                    {cells}\r\n                </div>\r\n                <div className={'interface'}>\r\n                    <div className={'count-container'}>\r\n                        <div className={'label'}>\r\n                            Generations:\r\n                        </div>\r\n                        <div className={'label'}>\r\n                            live Cells:\r\n                        </div>\r\n                    </div>\r\n                    <div className={'button-container'}>\r\n                        <div className={start_class} onClick={this.handleStartClick}>\r\n                            Start\r\n                        </div>\r\n                        <div className={stop_class} onClick={this.handleStopClick}>\r\n                            Stop\r\n                        </div>\r\n                    </div>\r\n                    <div className = {'button-container'}>\r\n                        <div className={'button'}>\r\n                            Clear\r\n                        </div>\r\n                    </div>\r\n                    <div className = {'button-container'}>\r\n                        <div className={'button'}>\r\n                            Randomize\r\n                        </div>\r\n                    </div>\r\n                    <div className={'slider-container'}>\r\n                        <div className={'label'}>Speed: </div>\r\n                        <Slider value = {40} trackWidth = {200} thumbWidth = {10} onValueChanged = {()=>{}}/>\r\n                    </div>\r\n                    <div className={'slider-container'}>\r\n                        <div className={'label'}>Size: </div>\r\n                        <Slider value = {40} trackWidth = {200} thumbWidth = {10} onValueChanged = {(value) => this.handleValueChanged(value)}/>\r\n                    </div>\r\n                    <div className={'checkbox-container'}>\r\n                        <div className={'label'}>borders: </div>\r\n                        <input className={'checkbox'} type={'checkbox'}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        );\r\n    }\r\n\r\n    handleValueChanged(value){\r\n        const totalDim = Math.round(20 + value / 5);\r\n\r\n\r\n        this.setState({\r\n            cells: new Array(totalDim * totalDim).fill(0),\r\n            width:totalDim,\r\n            height:totalDim,\r\n        });\r\n    }\r\n\r\n    handleClick(i,j){\r\n        const new_arr = this.state.cells.slice();\r\n        new_arr[this.state.width * i + j] = (new_arr[this.state.width * i + j] + 1) % 2;\r\n        this.setState({cells: new_arr});\r\n    }\r\n\r\n\r\n\r\n    timeStep(){\r\n\r\n        const new_arr = this.state.cells.slice();\r\n\r\n        for(let i=0;i<this.state.height;i++) {\r\n            for (let j = 0; j < this.state.width; j++) {\r\n\r\n                const numNeighbours = this.countNeighbours(i,j);\r\n\r\n                if(this.getArrayByIndex(i,j) > 0){\r\n                    if(numNeighbours === 3 || numNeighbours === 2){\r\n                        new_arr[this.state.width * i + j] = 2;\r\n                    }else{\r\n                        new_arr[this.state.width * i + j] = 0;\r\n                    }\r\n                }else{\r\n                    if(numNeighbours === 3){\r\n                        new_arr[this.state.width * i + j] = 1;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.setState({cells : new_arr});\r\n\r\n\r\n    }\r\n\r\n\r\n    handleStartClick = () => {\r\n\r\n        const func = () => window.requestAnimationFrame(() => this.timeStep());\r\n\r\n        this.setState({\r\n            cells: this.state.cells,\r\n            intervalID: setInterval(func,100),\r\n            isGenerating: true,\r\n        });\r\n        //\r\n\r\n\r\n    };\r\n\r\n    handleStopClick = () =>{\r\n        if(this.state.intervalID === -1){\r\n            return;\r\n        }\r\n        clearInterval(this.state.intervalID);\r\n\r\n        this.setState({\r\n            cells: this.state.cells,\r\n            intervalID: -1,\r\n            isGenerating: false,\r\n        });\r\n    };\r\n\r\n    getArrayByIndex(i,j){\r\n\r\n        if(i < 0){\r\n            i = this.state.height + i;\r\n        }else if(i >= this.state.height){\r\n            i = i - this.state.height;\r\n        }\r\n\r\n        if(j < 0){\r\n            j = this.state.width + j;\r\n        }else if(j >= this.state.width){\r\n            j = j - this.state.width;\r\n        }\r\n\r\n        return this.state.cells[this.state.width * i + j];\r\n    }\r\n\r\n    countNeighbours(x,y){\r\n        const Dx = [-1,-1,1,1,1,-1,0,0];\r\n        const Dy = [1,-1,1,0,-1,0,1,-1];\r\n\r\n        let count = 0;\r\n\r\n        for(let i=0;i<8;i++){\r\n\r\n            if(this.getArrayByIndex(x+Dx[i],y+Dy[i]) > 0){\r\n                count ++;\r\n            }\r\n\r\n        }\r\n\r\n        return count;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nclass Slider extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value : this.props.value,\r\n            progress : this.props.trackWidth / 100 * this.props.value,\r\n            isDragging : false,\r\n            prevX : -1,\r\n        };\r\n\r\n\r\n        this.props.onValueChanged(this.props.value);\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('mousemove',e => this.handleMouseMove(e));\r\n        document.addEventListener('mouseup', e => this.handleThumbUp(e));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('mousemove',e => this.handleMouseMove(e));\r\n        document.removeEventListener('mouseup', e => this.handleThumbUp(e));\r\n    }\r\n\r\n    render(){\r\n\r\n        const offset = this.state.progress - this.props.thumbWidth / 2 - 1;\r\n        const len = offset < 0 ? 0 : offset;\r\n\r\n        let className = \"thumb\";\r\n        if(this.state.isDragging){\r\n            className += \" big-focus\";\r\n        }\r\n\r\n        return (\r\n            <div className={'track'} style = {{width : this.props.trackWidth}}>\r\n                <div className={className}\r\n                     style={{left : `${offset}px`,width : this.props.thumbWidth}}\r\n                     onMouseDown={e => this.handleThumbDown(e)}/>\r\n                <div className={'fill'} style ={{width:`${len}px`}}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleThumbDown(e){\r\n        //console.log(e);\r\n        this.setState({\r\n            value : this.state.value,\r\n            isDragging : true,\r\n            prevX : e.clientX,\r\n        });\r\n    }\r\n\r\n    handleThumbUp(){\r\n        this.setState({\r\n            value : this.state.value,\r\n            isDragging : false,\r\n            prevX : -1,\r\n        });\r\n    }\r\n\r\n    handleMouseMove(e){\r\n\r\n        if(!this.state.isDragging){\r\n            return;\r\n        }\r\n\r\n        const diff = e.clientX - this.state.prevX;\r\n        let progress = this.state.progress + diff;\r\n\r\n        if(progress > this.props.trackWidth){\r\n            progress = this.props.trackWidth;\r\n        }\r\n        if(progress < 0){\r\n            progress = 0;\r\n        }\r\n\r\n        const value = progress / this.props.trackWidth * 100;\r\n        //console.log(this.props);\r\n        if(value !== this.state.value){\r\n            this.props.onValueChanged(value);\r\n        }\r\n\r\n\r\n        this.setState({\r\n            value : value,\r\n            progress : progress,\r\n            isDragging : true,\r\n            prevX : e.clientX,\r\n        });\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Container width={50} height = {50} pxWidth={500} pxHeight={500}/>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}